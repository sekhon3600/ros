#!/usr/bin/env python3

import sys
import time
import numpy as np
import cv2
from cv_bridge import CvBridge
import rospy
import roslib
from sensor_msgs.msg import CompressedImage

class LaneDetectionNode:
    def _init_(self):
        self.bridge = CvBridge()

        # Initialize ROS node
        rospy.init_node('lane_detection_node', anonymous=True)

        # Subscribe to the image topic
        self.image_subscriber = rospy.Subscriber('/duckie/camera_node/image/compressed', CompressedImage, self.process_image, queue_size=1)

    def process_image(self, msg):
        rospy.loginfo("Received image")

        # Convert compressed image message to OpenCV image
        image = self.bridge.compressed_imgmsg_to_cv2(msg, desired_encoding='bgr8')

        # Define the cropping parameters
        cropped_image = self.crop_image(image, top=200, bottom=400, left=100, right=500)

        # Convert cropped image to HSV color space
        hsv_image = cv2.cvtColor(cropped_image, cv2.COLOR_BGR2HSV)

        # Detect white and yellow lanes
        white_edges = self.detect_edges(hsv_image, lower_bound=np.array([0, 0, 200]), upper_bound=np.array([255, 50, 255]))
        yellow_edges = self.detect_edges(hsv_image, lower_bound=np.array([20, 100, 100]), upper_bound=np.array([40, 255, 255]))

        # Detect lines using Hough Transform
        white_lines = self.hough_lines_detection(white_edges)
        yellow_lines = self.hough_lines_detection(yellow_edges)

        # Draw detected lines on the cropped image
        self.draw_lines(cropped_image, white_lines)
        self.draw_lines(cropped_image, yellow_lines)

        # Display the results
        cv2.imshow('White Lane Mask', white_edges)
        cv2.imshow('Yellow Lane Mask', yellow_edges)
        cv2.imshow('Lane Detection', cropped_image)
        cv2.waitKey(1)

    def crop_image(self, img, top, bottom, left, right):
        return img[top:bottom, left:right]

    def detect_edges(self, hsv_img, lower_bound, upper_bound):
        # Create a mask based on the specified color range
        mask = cv2.inRange(hsv_img, lower_bound, upper_bound)
        # Apply Canny Edge Detection
        edges = cv2.Canny(mask, 50, 150)
        return edges

    def hough_lines_detection(self, edge_img):
        # Apply Hough Transform to detect lines
        lines = cv2.HoughLinesP(edge_img, rho=1, theta=np.pi/180, threshold=100, minLineLength=50, maxLineGap=50)
        return lines

    def draw_lines(self, img, lines):
        if lines is not None:
            for line in lines:
                x1, y1, x2, y2 = line[0]
                cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)

    def spin(self):
        rospy.spin()

if _name_ == '_main_':
    try:
        lane_detection_node = LaneDetectionNode()
        lane_detection_node.spin()
    except rospy.ROSInterruptException:
        pass
