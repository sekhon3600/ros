#!/usr/bin/env python3

import rospy from duckietown_msgs.msg import Twist2DStamped, AprilTagDetectionArray

class FollowTarget:
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node('follow_target_node', anonymous=True)

        # Define the shutdown behavior
        rospy.on_shutdown(self.shutdown_procedure)

        # Define publisher for robot's velocity commands and subscriber for AprilTag detections
        self.velocity_publisher = rospy.Publisher('/duckie/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        self.tag_subscriber = rospy.Subscriber('/duckie/apriltag_detector_node/detections', AprilTagDetectionArray, self.process_tags, queue_size=1)

        # Keep the node running and processing callbacks
        rospy.spin()

    # Callback to process detected AprilTags
    def process_tags(self, msg):
        self.update_robot_movement(msg.detections)

    # Shutdown procedure to stop the robot
    def shutdown_procedure(self):
        rospy.loginfo("Shutting down system, stopping the robot...")
        self.halt_robot()

    # Function to halt the robot
    def halt_robot(self):
        stop_cmd = Twist2DStamped()
        stop_cmd.header.stamp = rospy.Time.now()
        stop_cmd.v = 0.0
        stop_cmd.omega = 0.0
        self.velocity_publisher.publish(stop_cmd)

    # Function to update robot movement based on detections
    def update_robot_movement(self, detections):
        if not detections:
            self.halt_robot()
            return
        
        self.halt_robot()
        x_pos = detections[0].transform.translation.x
        y_pos = detections[0].transform.translation.y
        z_pos = detections[0].transform.translation.z

        rospy.loginfo("Detected tag at x: %f, y: %f, z: %f", x_pos, y_pos, z_pos)
        rospy.sleep(1)

        move_cmd = Twist2DStamped()
        move_cmd.header.stamp = rospy.Time.now()

        if z_pos > 0.15:
            move_cmd.v = 0.2
            move_cmd.omega = 0.0
            self.velocity_publisher.publish(move_cmd)
            rospy.sleep(0.2)
            self.halt_robot()
        
        elif z_pos < 0.10:
            move_cmd.v = -0.2
            move_cmd.omega = 0.0
            self.velocity_publisher.publish(move_cmd)
            rospy.sleep(0.2)
            self.halt_robot()

        elif x_pos > 0.05:
            move_cmd.v = 0.0
            move_cmd.omega = -0.4
            self.velocity_publisher.publish(move_cmd)
            rospy.sleep(0.4)
            self.halt_robot()
        
        elif x_pos < -0.05:
            move_cmd.v = 0.0
            move_cmd.omega = 0.4
            self.velocity_publisher.publish(move_cmd)
            rospy.sleep(0.4)
            self.halt_robot()

if __name__ == '__main__':
    try:
        FollowTarget()
    except rospy.ROSInterruptException:
        pass
