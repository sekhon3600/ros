#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped, FSMState, WheelEncoderStamped
from sensor_msgs.msg import Rangeimport rospy
from duckietown_msgs.msg import Twist2DStamped
from duckietown_msgs.msg import FSMState
from duckietown_msgs.msg import WheelEncoderStamped
from sensor_msgs.msg import Range

class SquareDriver:
    def _init_(self):
        # Initialize global class variables
        self.velocity_cmd = Twist2DStamped()
        self.encoder_ticks = 0
        self.front_distance = 0

        # Initialize ROS node
        rospy.init_node('square_driver_node', anonymous=True)

        # Initialize Pub/Subs
        self.command_publisher = rospy.Publisher('/duckie/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/duckie/fsm_node/mode', FSMState, self.state_machine_callback, queue_size=1)
        rospy.Subscriber('/duckie/left_wheel_encoder_node/tick', WheelEncoderStamped, self.encoder_callback, queue_size=1)
        rospy.Subscriber('/duckie/front_center_tof_driver_node/range', Range, self.range_callback, queue_size=1)
        
    def state_machine_callback(self, msg):
        rospy.loginfo("Current State: %s", msg.state)
        if msg.state == "NORMAL_JOYSTICK_CONTROL":
            self.halt_robot()
        elif msg.state == "LANE_FOLLOWING":
            rospy.sleep(1)  # Wait for a sec for the node to be ready
            self.execute_square_movement()

    def encoder_callback(self, msg):
        self.encoder_ticks = msg.data

    def range_callback(self, msg):
        self.front_distance = msg.range

    # Sends zero velocities to halt the robot
    def halt_robot(self):
        self.velocity_cmd.header.stamp = rospy.Time.now()
        self.velocity_cmd.v = 0.0
        self.velocity_cmd.omega = 0.0
        self.command_publisher.publish(self.velocity_cmd)
 
    # Spin forever but listen to message callbacks
    def run(self):
        rospy.spin()

    # Robot drives in a square and then halts
    def execute_square_movement(self):
        for _ in range(4):
            self.drive_forward()
            self.turn_90_degrees()
        self.halt_robot()

    def drive_forward(self):
        self.velocity_cmd.header.stamp = rospy.Time.now()
        self.velocity_cmd.v = 1.0  # Forward velocity
        self.velocity_cmd.omega = 0.0
        self.command_publisher.publish(self.velocity_cmd)
        rospy.loginfo("Driving forward!")
        rospy.sleep(2)  # Adjust this time to ensure the robot moves the desired distance

    def turn_90_degrees(self):
        self.velocity_cmd.header.stamp = rospy.Time.now()
        self.velocity_cmd.v = 0.0  # No forward velocity
        self.velocity_cmd.omega = 1.0  # Angular velocity for 90 degree turn
        self.command_publisher.publish(self.velocity_cmd)
        rospy.loginfo("Turning 90 degrees!")
        rospy.sleep(1)  # Adjust this time to ensure the robot turns 90 degrees
        self.halt_robot()

if _name_ == '_main_':
    try:
        square_driver = SquareDriver()
        square_driver.run()
    except rospy.ROSInterruptException:
        pass
